{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b6714d7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original List: [10, 13, 14, 18, 19, 31, 33, 42, 45, 50]\n",
      "Even Numbers: [10, 14, 18, 42, 50]\n",
      "Odd Numbers: [13, 19, 31, 33, 45]\n"
     ]
    }
   ],
   "source": [
    "# Q1. Write a python program to create a list of even numbers and another list of odd numbers from a given list\n",
    "\n",
    "def separate_even_odd(input_list):\n",
    "    even_numbers = []\n",
    "    odd_numbers = []\n",
    "\n",
    "    for num in input_list:\n",
    "        if num % 2 == 0:\n",
    "            even_numbers.append(num)\n",
    "        else:\n",
    "            odd_numbers.append(num)\n",
    "\n",
    "    return even_numbers, odd_numbers\n",
    "input_list = [10, 13, 14, 18, 19, 31, 33, 42, 45, 50]\n",
    "even_numbers, odd_numbers = separate_even_odd(input_list)\n",
    "\n",
    "print(\"Original List:\", input_list)\n",
    "print(\"Even Numbers:\", even_numbers)\n",
    "print(\"Odd Numbers:\", odd_numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b613d4d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original List: [10, 5, 20, 15, 30]\n",
      "Second Largest (Sorting): 20\n",
      "Second Largest (Loop): 20\n",
      "Second Largest (max() and remove()): 20\n"
     ]
    }
   ],
   "source": [
    "# Q2. Write a python program to find second largest number in a given list using different approaches\n",
    "\n",
    "# By Sorting\n",
    "def find_second_largest_sort(input_list):\n",
    "    sorted_list = sorted(input_list)\n",
    "    return sorted_list[-2]\n",
    "input_list = [10, 5, 20, 15, 30]\n",
    "print(\"Original List:\", input_list)\n",
    "print(\"Second Largest (Sorting):\", find_second_largest_sort(input_list))\n",
    "\n",
    "# By using Loop\n",
    "def find_second_largest_loop(input_list):\n",
    "    first_max = max(input_list)\n",
    "    second_max = float('-inf')\n",
    "    for num in input_list:\n",
    "        if num != first_max and num > second_max:\n",
    "            second_max = num\n",
    "    return second_max\n",
    "print(\"Second Largest (Loop):\", find_second_largest_loop(input_list))\n",
    "\n",
    "# By using max() and remove()\n",
    "def find_second_largest_max_remove(input_list):\n",
    "    first_max = max(input_list)\n",
    "    input_list.remove(first_max)\n",
    "    return max(input_list)\n",
    "print(\"Second Largest (max() and remove()):\", find_second_largest_max_remove(input_list))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cc3036ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is the string a palindrome? True\n"
     ]
    }
   ],
   "source": [
    "# Q3. Check if a string is palindrome or not\n",
    "\n",
    "def is_palindrome(s):\n",
    "    # Remove spaces and convert to lowercase for case-insensitive comparison\n",
    "    s = s.replace(\" \", \"\").lower()\n",
    "    # Check if the string is equal to its reverse\n",
    "    return s == s[::-1]\n",
    "\n",
    "# Example usage:\n",
    "string = \"Madam\"\n",
    "print(\"Is the string a palindrome?\", is_palindrome(string))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c62aec5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated Inventory:\n",
      "gold: 550\n",
      "pouch: ['flint', 'twine', 'gemstone']\n",
      "backpack: ['bedroll', 'bread loaf', 'xylophone']\n",
      "pocket: ['seashell', 'strange berry', 'lint']\n"
     ]
    }
   ],
   "source": [
    "# Q4.\n",
    "\n",
    "inventory = {\n",
    "    'gold': 500,\n",
    "    'pouch': ['flint', 'twine', 'gemstone'],\n",
    "    'backpack': ['xylophone', 'dagger', 'bedroll', 'bread loaf']\n",
    "}\n",
    "\n",
    "# Add a key called 'pocket' and set its value\n",
    "inventory['pocket'] = ['seashell', 'strange berry', 'lint']\n",
    "\n",
    "# Sort the items in the list stored under the 'backpack' key\n",
    "inventory['backpack'].sort()\n",
    "\n",
    "# Remove 'dagger' from the list of items stored under the 'backpack' key\n",
    "inventory['backpack'].remove('dagger')\n",
    "\n",
    "# Add 50 to the number stored under the 'gold' key\n",
    "inventory['gold'] += 50\n",
    "\n",
    "# Print the updated inventory\n",
    "print(\"Updated Inventory:\")\n",
    "for key, value in inventory.items():\n",
    "    print(key + ':', value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c2eab7ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "banana\n",
      "price: 4\n",
      "stock: 50\n",
      "\n",
      "apple\n",
      "price: 2\n",
      "stock: 40\n",
      "\n",
      "orange\n",
      "price: 1.5\n",
      "stock: 20\n",
      "\n",
      "pear\n",
      "price: 3\n",
      "stock: 10\n",
      "\n",
      "Total revenue if sold all food: 340.0\n"
     ]
    }
   ],
   "source": [
    "# Q5.\n",
    "\n",
    "prices = {\n",
    "    \"banana\": {\"price\": 4, \"stock\": 50},\n",
    "    \"apple\": {\"price\": 2, \"stock\": 40},\n",
    "    \"orange\": {\"price\": 1.5, \"stock\": 20},\n",
    "    \"pear\": {\"price\": 3, \"stock\": 10}\n",
    "}\n",
    "\n",
    "# Loop through each key in prices\n",
    "total_revenue = 0\n",
    "for food, details in prices.items():\n",
    "    print(food)\n",
    "    print(\"price:\", details[\"price\"])\n",
    "    print(\"stock:\", details[\"stock\"])\n",
    "    total_revenue += details[\"price\"] * details[\"stock\"]\n",
    "    print()\n",
    "\n",
    "print(\"Total revenue if sold all food:\", total_revenue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed4ae2ae",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
